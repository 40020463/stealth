package main

import (
	"fmt"
	"os/exec"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/go-rod/rod/lib/utils"
)

var slash = filepath.FromSlash

func main() {

	build := utils.S(`// generated by running "go generate" on project root

package stealth

// JSVersion for stealth
const JSVersion = "v{{.ver}}"

// JS for stealth
const JS = {{.js}}
`,
		"ver", version(),
		"js", encode(fetchJS()),
	)

	utils.E(utils.OutputFile(slash("assets.go"), build))

	utils.Exec("go", "install", "github.com/ysmood/golangci-lint@latest")
	utils.Exec("golangci-lint")
}

func fetchJS() string {
	utils.Exec("npx", "extract-stealth-evasions@latest")

	code, err := utils.ReadString("stealth.min.js")
	utils.E(err)

	// since the npx already mentioned extract-stealth-evasions, we don't have to do it again.
	code = regexp.MustCompile(`\A/\*\![\s\S]+?\*/`).ReplaceAllString(code, "")

	return fmt.Sprintf(";(() => {\n%s\n})();", code)
}

func version() string {
	b, err := exec.Command("npx", "extract-stealth-evasions@latest", "--version").CombinedOutput()
	utils.E(err)
	return strings.TrimSpace(string(b))
}

// not using encoding like base64 or gzip because of they will make git diff every large for small change
func encode(s string) string {
	return "`" + strings.ReplaceAll(s, "`", "` + \"`\" + `") + "`"
}
