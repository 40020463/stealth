package main

import (
	"fmt"
	"path/filepath"
	"regexp"
	"strings"

	"github.com/go-rod/rod/lib/utils"
)

var slash = filepath.FromSlash

func main() {

	build := utils.S(`// generated by running "go generate" on project root

package bypass

// JS for bypass
const JS = {{.js}}
`,
		"js", encode(fetchBypassJS()),
	)

	utils.E(utils.OutputFile(slash("assets.go"), build))
}

func fetchBypassJS() string {
	utils.Exec("npx", "extract-stealth-evasions")

	code, err := utils.ReadString("stealth.min.js")
	utils.E(err)

	// since the npx already mentioned extract-stealth-evasions, we don't have to do it again.
	code = regexp.MustCompile(`\A/\*\![\s\S]+?\*/`).ReplaceAllString(code, "")

	return fmt.Sprintf(";(() => {\n%s\n})();", code)
}

// not using encoding like base64 or gzip because of they will make git diff every large for small change
func encode(s string) string {
	return "`" + strings.ReplaceAll(s, "`", "` + \"`\" + `") + "`"
}
